MySql
------------------------
Mysql ayarlarından varible(basedir) al: SELECT @@"basedir"; 
Demosundan actor u al: SELECT * FROM "sakila.actor";
Saat tanımlama: '15:12:10'
Tarih tanımlama: '2021-07-11'
yılı al: SELECT year('2021-07-11') veya SELECT year('20210711')
değer atama: INSERT INTO "şemaadı"."tabloadı" VALUES (deger1, deger2, deger3);
columnları belirterek değer atama: INSERT INTO category(category_code,category_name) VALUES('ELB','Elbise');
şema kullan: USE "şemaadı";
tablodaki tüm kolonları al: SELECT * FROM "tablo adı";
belli sütunları al: SELECT product_id, product_code, product_name stock_qty FROM product;
tekrar eden değerleri ele: SELECT DISTINCT product_id FROM order_detail;
tablonun ismini as ile değiştir: SELECT product_name, product_price * stock_qty as total FROM product;
yorum: #
100 eeşit mi= SELECT product_price =100
belli bir şartı sağlayan sütunları al: SELECT * FROM product WHERE category_id=3;
AND kullanımı: SELECT * FROM product WHERE category_id=2 AND product_price=250;
OR, WHERE NOT, <>
boş olmayan satırları al: SELECT * FROM customer WHERE tc_identity IS NOT NULL;
çoklu or için: SELECT * FROM customer WHERE province IN("İstanbul", "İzmir");
between operatörü: SELECT * FROM product WHERE product_price BETWEEN 50 AND 100;
LIKE kullanımı (adı a ile başlayan): SELECT * FROM customer WHERE first_name LIKE "A%";
sonu a ile biten: %a
içinde a geçen: %a%
ikinci karakteri a: _a%
a ile başlayan en az iki karakter uzunluğunda: a_%
isminde s geçen: SELECT * FROM customer WHERE first_name REGEXP "s";
ismi a ile başlyan: ^a
sonu n ile biten: n$
içinde n veya t geçen: n|t 
içinde al veya el geçen: [ae]l
isminde a ile h başlayanlar: ^[a-h]
sıralama: SELECT * FROM customer ORDER BY first_name, last_name; 
ARTANA GÖRE: SELECT * FROM customer ORDER BY first_name ASC;
azalana göre: SELECT * FROM customer ORDER BY first_name DESC;
limit ile 5 satır getir: LIMIT 5;
ilki eleyip diğerlerini getir: LIMIT 1,5;

INNER JOIN ile birleştir: SELECT * FROM product AS p
INNER JOIN category AS c ON p.category_id = c.category_id;


LEFT JOIN ile birleştirme: 
SELECT p.product_id, p.product_name, p.promotion_id, pm.promotion_name
FROM product p
LEFT JOIN promotion pm ON p.promotion_id =pm.promotion_id;

RIGHT JOIN ile birleştirme:
SELECT p.product_id, p.product_name, pm.promotion_id, pm.promotion_name FROM product p
RIGHT JOIN promotion pm ON p.promotion_id= pm.promotion_id;

CROSS JOIN ile birleştirme: 
SELECT p.product_id, p.product_name, p.category_id, c.category_id, c.category_name FROM product p 
CROSS JOIN category c


USING ile aynı key olan tablolar:
SELECT p.product_id, p.product_name, p.category_id, c.category_id, c.category_name FROM product p 
INNER JOIN category c USING(category_id);

İki tablo arası union ile birleştirme:
SELECT province FROM customer
UNION
SELECT province FROM supplier;

İki tablo arası tekrar eden kayıtlar da dahil olmak üzere birleştirme:
SELECT province FROM customer
UNION ALL
SELECT province FROM supplier;

kaç tane olduğunu gör(null sayılmaz): SELECT COUNT(buying_price) FROM product;
kaçının null olduğunu gör: SELECT COUNT(product_id) FROM product WHERE buying_price IS NULL;
diğer yol: 
SELECT COUNT(*),
COUNT(buying_price), 
COUNT(*)- COUNT(buying_price)
FROM product;

tekrar edenleri sayma: SELECT COUNT(DISTINCT customer_id) FROM `order`;
topla: SELECT SUM(order_total) FROM `order`;
average: SELECT AVG(order_total) FROM `order`; 
min: SELECT MIN(product_price) FROM product; 
max: SELECT MAX(product_price) FROM product; 


alt sorgu örnek:
SELECT * FROM product WHERE product_price > 
(SELECT product_price FROM product WHERE product_code= "GMK2");

IN kullanımı(IN NOT da var): WHERE product_id IN(9,10,11);

ALL kullanımı(hepsi sağlıyo mu)(ANY de var): 
SELECT * FROM product WHERE product_price > ALL(SELECT product_price FROM product WHERE product_name LIKE "%shirts%");

EXISTS ile ile performanslı: SELECT * FROM product p
WHERE EXISTS
(
	SELECT product_id FROM order_detail od WHERE od.product_id=p.product_id
)

INSERT ile ekleme:
INSERT INTO category(category_id,category_code,category_name) VALUES(1,"Saat","Saat")

INSERT ile ekleme ama AUTO Increase varsa:
INSERT INTO category(category_id,category_code,category_name) VALUES(DEFAULT,"Saat","Saat")

Başka Insert Yöntem:
INSERT INTO category 
SET 
	category_code="Saat",
	category_name="Saat"

Başka Insert Yöntem:
INSERT INTO category(category_code,category_name)
VALUES
	("TLF","Telefon"),
	("HDD","Hardisk"),
	("BLG","Pc")

INSERT le ve hangi id ye eklediğini öğren:
INSERT INTO product
(category_id,product_code,product_name,product_price,buying_price,vat,stock_qty,unit_id,currency_id,promotion_id,supplier_id)
VALUES(4,"RLX","ROLEX",2500,2250,18,20,2,1,DEFAULT,DEFAULT);
SELECT last_insert_id();

Hem order'a hem detail'e ekle aynı id ye ekle (order yazarken ters tırnak çünkü order komut ile karışabilir)
INSERT INTO `order`
(order_date,order_total,customer_id,payment_method_id)
VALUES("2021-08-01",2900,1,1);
INSERT INTO order_detail
(order_id,order_qty,product_price,vat,line_total,product_id)
VALUES
(LAST_INSERT_ID(),1,2500,18,2500,12);

UPDATE ile güncelle:
UPDATE category
SET category_code="SND",category_name="Sandalye"
WHERE category_id=5

DELETE ile sil:
DELETE FROM category WHERE category_id=5;

Tablo yedeği oluştur
CREATE TABLE _category AS SELECT * FROM category;

Tablo yedeği sil
DROP TABLE _category

Tabloyu kolayca copy le(tabloya sağ tık send to sql editor + create statement)

Bir tablodan başka tabloya kopyala:
INSERT INTO _customer SELECT * FROM customer;


Spesifik kopyala(Limitli):
INSERT INTO _customer(first_name,last_name) SELECT first_name,last_name FROM customer LIMIT 2

GOUP BY KULLANIMI
SELECT province, COUNT(*) AS customer_count FROM customer GROUP BY province

İleri seviye ORDER BY + GROUP BY Örnek
SELECT order_date,COUNT(order_total) AS siparis_adedi,SUM(order_total) AS siparis_toplami
FROM `order`
GROUP BY order_date
ORDER BY order_date DESC;

BAYA ileri örnek
SELECT product_id,product_name, COUNT(*) AS siparis_adedi, SUM(line_total) AS siparis_toplamı FROM order_detail
JOIN product USING(product_id)
GROUP BY product_id,product_name
ORDER BY siparis_adedi DESC;

HAVING Kullanımı (WHERE in aynısı sadece ORDER BY da kullanılıyo) 
SELECT customer_id, first_name, last_name, COUNT(*) AS siparis_top, SUM(order_total) AS siparis_toplami 
FROM `order`
INNER JOIN customer USING(customer_id)
GROUP BY customer_id, first_name, last_name
HAVING SUM(order_total)>500;

ROLLUP Kullanımı()
SELECT 
country, province, SUM(order_total) 
FROM customer
INNER JOIN `order` USING(customer_id)
Group BY country, province WITH ROLLUP;

GROUPING kullanımı:
SELECT 
IF(GROUPING(country),"Tüm Ülkeler",country)  AS country,
IF(GROUPING(province),"Tüm Şehirler",province) AS province,
SUM(order_total) AS siparis_toplami,
COUNT(*) AS siparis_adedi
FROM customer
INNER JOIN `order` USING(customer_id)
Group BY country, province WITH ROLLUP;

ABS:
SELECT *, ABS(product_price) AS mutlak FROM product;

ROUND(ikinci sayı kaçıncı haneye yuvarlayacağı 20.5 e yuvarladı):
SELECT ROUND(20.49,1) 

TRUNCATE(Kırpma 20.4 oldu):
SELECT TRUNCATE(20.49,1) 

CEIL(Kendinden büyük en yakın tam sayı 26 oldu):
SELECT CEIL(25.4)

FLOOR(Kendinden küçük en yakın tam sayı 25 oldu):
SELECT FLOOR(25.4)

RAND(0 ile 1 arası sayı, 0 dahil 1 değil. İçine seed girilebiliyo.
SELECT RAND()

